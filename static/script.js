// === FunÃ§Ãµes do Modal de Login ===
function abrirModalLogin() {
  const modal = document.getElementById('modalLogin');
  modal.style.display = 'block';
  document.body.style.overflow = 'hidden'; // Previne scroll da pÃ¡gina
}

function fecharModalLogin() {
  const modal = document.getElementById('modalLogin');
  modal.style.display = 'none';
  document.body.style.overflow = 'auto'; // Restaura scroll da pÃ¡gina
  // Limpar campos do formulÃ¡rio
  document.getElementById('matriculaFuncionario').value = '';
  document.getElementById('senhaSupervisor').value = '';
}

// Fechar modal ao clicar fora dele
window.onclick = function(event) {
  const modal = document.getElementById('modalLogin');
  if (event.target === modal) {
    fecharModalLogin();
  }
}

// Fechar modal com tecla ESC
document.addEventListener('keydown', function(event) {
  if (event.key === 'Escape') {
    fecharModalLogin();
  }
});

// === Login Supervisor ===
const loginSupervisorForm = document.getElementById('loginSupervisorForm');
if (loginSupervisorForm) {
  loginSupervisorForm.addEventListener('submit', async function (e) {
    e.preventDefault();
    const senha = document.getElementById('senhaSupervisor').value;
    try {
      const res = await fetch('/login-supervisor', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ senha })
      });
      const dados = await res.json();
      alert(dados.mensagem);
      if (res.status === 200 && dados.redirect) {
        marcarSupervisorLogado(); // Marcar supervisor como logado
        fecharModalLogin(); // Fecha o modal apÃ³s login bem-sucedido
        window.location.href = dados.redirect;
      } else {
        // Limpar campo apÃ³s erro
        document.getElementById('senhaSupervisor').value = '';
      }
    } catch (err) {
      alert('Erro de conexÃ£o com o servidor.');
      // Limpar campo apÃ³s erro
      document.getElementById('senhaSupervisor').value = '';
    }
  });
}

// === Login FuncionÃ¡rio ===
const loginFuncionarioForm = document.getElementById('loginFuncionarioForm');
if (loginFuncionarioForm) {
  loginFuncionarioForm.addEventListener('submit', async function (e) {
    e.preventDefault();
    const matricula = document.getElementById('matriculaFuncionario').value.trim();
    try {
      const res = await fetch('/login-funcionario', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ matricula })
      });
      const dados = await res.json();
      alert(dados.mensagem);
      if (res.status === 200) {
        localStorage.setItem('matriculaLogada', matricula);
        atualizarFuncionariosLogados();
        verificarAcessoSistema(); // Verificar acesso ao sistema apÃ³s login
        fecharModalLogin(); // Fecha o modal apÃ³s login bem-sucedido
        // Limpar campo de matrÃ­cula
        document.getElementById('matriculaFuncionario').value = '';
      } else {
        // Limpar campo apÃ³s erro
        document.getElementById('matriculaFuncionario').value = '';
      }
    } catch (err) {
      alert('Erro de conexÃ£o com o servidor.');
      // Limpar campo apÃ³s erro
      document.getElementById('matriculaFuncionario').value = '';
    }
  });
}

// === Logout FuncionÃ¡rio ===
async function logoutFuncionario() {
  const matricula = localStorage.getItem('matriculaLogada');
  if (!matricula) {
    alert('Nenhum funcionÃ¡rio logado.');
    return;
  }
  
  try {
    const res = await fetch('/logout-funcionario', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ matricula })
    });
    const dados = await res.json();
    alert(dados.mensagem);
    if (res.status === 200) {
      localStorage.removeItem('matriculaLogada');
      atualizarFuncionariosLogados();
      verificarAcessoSistema(); // Verificar acesso ao sistema apÃ³s logout
    }
  } catch (err) {
    alert('Erro de conexÃ£o com o servidor.');
  }
}

// === Logout Supervisor ===
async function logoutSupervisor() {
  try {
    const res = await fetch('/logout-supervisor', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' }
    });
    const dados = await res.json();
    alert(dados.mensagem);
    if (res.status === 200) {
      marcarSupervisorDeslogado(); // Marcar supervisor como deslogado
      // Redirecionar para pÃ¡gina inicial se estiver na Ã¡rea do supervisor
      if (window.location.pathname.includes('supervisor')) {
        window.location.href = '/';
      }
    }
  } catch (err) {
    alert('Erro de conexÃ£o com o servidor.');
  }
}

// === Atualizar FuncionÃ¡rios Logados ===
async function atualizarFuncionariosLogados() {
  const lista = document.getElementById('listaFuncionariosLogados');
  const logoutSection = document.getElementById('logoutSection');
  
  if (!lista) return;
  
  lista.innerHTML = '';
  const matricula = localStorage.getItem('matriculaLogada');
  
  if (matricula) {
    const li = document.createElement('li');
    li.textContent = `MatrÃ­cula logada: ${matricula}`;
    lista.appendChild(li);
    
    // Mostrar botÃ£o de logout
    if (logoutSection) {
      logoutSection.style.display = 'block';
    }
  } else {
    const li = document.createElement('li');
    li.textContent = 'Nenhum funcionÃ¡rio logado.';
    lista.appendChild(li);
    
    // Esconder botÃ£o de logout
    if (logoutSection) {
      logoutSection.style.display = 'none';
    }
  }
}
// === Controle de Acesso ao Sistema ===
let supervisorLogado = false;

function verificarAcessoSistema() {
  const matricula = localStorage.getItem('matriculaLogada');
  const sistemaNaoLogado = document.getElementById('sistemaNaoLogado');
  const sistemaLogado = document.getElementById('sistemaLogado');
  
  if (!sistemaNaoLogado || !sistemaLogado) return;
  
  // Verificar se hÃ¡ funcionÃ¡rio logado ou supervisor logado
  if (matricula || supervisorLogado) {
    sistemaNaoLogado.style.display = 'none';
    sistemaLogado.style.display = 'block';
  } else {
    sistemaNaoLogado.style.display = 'block';
    sistemaLogado.style.display = 'none';
  }
}

// FunÃ§Ã£o para marcar supervisor como logado
function marcarSupervisorLogado() {
  supervisorLogado = true;
  verificarAcessoSistema();
}

// FunÃ§Ã£o para marcar supervisor como deslogado
function marcarSupervisorDeslogado() {
  supervisorLogado = false;
  verificarAcessoSistema();
}

// Inicializar estado dos funcionÃ¡rios logados
if (document.getElementById('listaFuncionariosLogados')) {
  atualizarFuncionariosLogados();
}

// === FunÃ§Ã£o para Voltar Ã  PÃ¡gina Anterior ===
function voltarPaginaAnterior() {
  console.log('FunÃ§Ã£o voltarPaginaAnterior() chamada');
  console.log('URL atual:', window.location.href);
  console.log('Referrer:', document.referrer);
  console.log('HistÃ³rico length:', window.history.length);
  
  // Verificar se estamos na pÃ¡gina /sistema
  if (window.location.pathname === '/sistema') {
    console.log('Estamos em /sistema - indo para pÃ¡gina inicial');
    window.location.href = '/';
    return;
  }
  
  // Para outras pÃ¡ginas, usar a lÃ³gica original
  // EstratÃ©gia 1: Tentar usar window.history.back() se hÃ¡ histÃ³rico
  if (window.history.length > 1) {
    console.log('EstratÃ©gia 1: Usando window.history.back()');
    window.history.back();
    return;
  }
  
  // EstratÃ©gia 2: Se nÃ£o hÃ¡ histÃ³rico, verificar referrer
  if (document.referrer && document.referrer !== window.location.href) {
    console.log('EstratÃ©gia 2: Redirecionando para referrer');
    window.location.href = document.referrer;
    return;
  }
  
  // EstratÃ©gia 3: Se nada funcionar, ir para pÃ¡gina inicial
  console.log('EstratÃ©gia 3: Redirecionando para pÃ¡gina inicial');
  window.location.href = '/';
}

// === Painel de HorÃ¡rio de BrasÃ­lia ===
function atualizarHorarioBrasilia() {
  const agora = new Date();
  const utc = agora.getTime() + (agora.getTimezoneOffset() * 60000);
  const brasilia = new Date(utc - (3 * 60 * 60 * 1000));
  const horas = String(brasilia.getHours()).padStart(2, '0');
  const minutos = String(brasilia.getMinutes()).padStart(2, '0');
  const segundos = String(brasilia.getSeconds()).padStart(2, '0');
  const dias = ['Domingo', 'Segunda', 'TerÃ§a', 'Quarta', 'Quinta', 'Sexta', 'SÃ¡bado'];
  const meses = ['janeiro', 'fevereiro', 'marÃ§o', 'abril', 'maio', 'junho', 'julho', 'agosto', 'setembro', 'outubro', 'novembro', 'dezembro'];
  const diaSemana = dias[brasilia.getDay()];
  const dia = brasilia.getDate();
  const mes = meses[brasilia.getMonth()];
  const ano = brasilia.getFullYear();
  const horaDiv = document.getElementById('horaBrasilia');
  const dataDiv = document.getElementById('dataBrasilia');
  if (horaDiv) horaDiv.textContent = `${horas}:${minutos}:${segundos}`;
  if (dataDiv) dataDiv.textContent = `${diaSemana}, ${dia} de ${mes} de ${ano}`;
}
setInterval(atualizarHorarioBrasilia, 1000);
atualizarHorarioBrasilia();

// === Frases Motivacionais ===
(function() {
  const frasesMotivacionais = [
    "ğŸš— Na vida, assim como no estacionamento rotativo, nÃ£o dÃ¡ pra ficar parado por muito tempo. O movimento Ã© necessÃ¡rio.",
    "ğŸš— Vagas sÃ£o temporÃ¡rias, oportunidades tambÃ©m. Aproveite enquanto Ã© sua vez.",
    "ğŸš— Cada carro tem seu tempo na vaga â€” respeite o seu, mas esteja pronto pra seguir viagem.",
    "ğŸš— Se nÃ£o encontrar uma vaga agora, nÃ£o desanime. DÃª mais uma volta. O que Ã© seu tÃ¡ reservado.",
    "ğŸš— NÃ£o pare onde nÃ£o Ã© permitido. Na vida, hÃ¡ lugares que sÃ³ parecem bons â€” mas podem te multar de evoluÃ§Ã£o.",
    "ğŸš— Rode o suficiente pra entender que o melhor lugar nem sempre estÃ¡ logo Ã  frente.",
    "ğŸš— A vida Ã© um giro contÃ­nuo, como no estacionamento rotativo â€” quem para demais perde o ritmo.",
    "ğŸš— Vaga fÃ¡cil pode ter preÃ§o alto. Escolha onde parar com sabedoria.",
    "ğŸš— Hora marcada, tempo contado â€” valorize o presente antes que expire.",
    "ğŸš— Estacionar bem exige atenÃ§Ã£o. Assim como na vida: alinhe, respire e confie.",
    "ğŸš— Na dÃºvida, sinalize. ComunicaÃ§Ã£o evita batidas â€“ no trÃ¢nsito e nas relaÃ§Ãµes.",
    "ğŸš— NÃ£o existe vaga impossÃ­vel. Existe insistÃªncia que vira conquista.",
    "ğŸš— A zona azul da vida ensina: tudo Ã© passageiro, menos o aprendizado.",
    "ğŸš— NÃ£o encoste no freio sÃ³ por medo. Ã€s vezes Ã© preciso acelerar com coragem.",
    "ğŸš— DÃª seta para os seus sonhos. O universo entende direÃ§Ã£o.",
    "ğŸš— Mesmo com a vaga apertada, um bom condutor sempre se encaixa.",
    "ğŸš— Rotatividade Ã© sinal de fluxo. Onde hÃ¡ troca, hÃ¡ renovaÃ§Ã£o.",
    "ğŸš— Respeite o tempo do outro na vaga. Sua hora vai chegar.",
    "ğŸš— A vaga mais difÃ­cil Ã s vezes Ã© a mais segura. Enfrente com tÃ©cnica e fÃ©.",
    "ğŸš— Na pressa de estacionar, muitos esquecem de olhar os retrovisores da consciÃªncia.",
    "ğŸš— Quem roda sem parar se perde. Pare. Recalcule. Recomece.",
    "ğŸš— Assim como num estacionamento lotado, Ã s vezes vocÃª precisa ter paciÃªncia pra achar o lugar certo.",
    "ğŸš— Ã€s vezes Ã© melhor dar uma volta a mais do que parar onde nÃ£o cabe vocÃª.",
    "ğŸš— A vida Ã© como um pÃ¡tio rotativo: quem respeita o tempo e o espaÃ§o cresce com mais leveza.",
    "ğŸš— Mantenha os farÃ³is ligados. Tem gente se inspirando no seu caminho.",
    "ğŸš— Estacionamento controlado, vida organizada. Tenha mÃ©todo e clareza em tudo.",
    "ğŸš— A placa pode dizer 'rotativo', mas sua essÃªncia Ã© permanente: nunca pare de tentar.",
    "ğŸš— Se a vaga parece longe, lembre-se: Ã s vezes Ã© sÃ³ mais uma curva atÃ© o destino ideal.",
    "ğŸš— Nem todo recuo Ã© derrota. Em algumas manobras, Ã© o Ãºnico jeito de entrar certo.",
    "ğŸš— Ao sair da vaga, deixe um bom exemplo pra quem vai ocupar seu lugar."
  ];
  let indiceFraseAtual = 0;
  function trocarFraseMotivacional() {
    const elementoFrase = document.getElementById('fraseAtual');
    if (elementoFrase) {
      elementoFrase.style.opacity = '0';
      setTimeout(() => {
        elementoFrase.textContent = frasesMotivacionais[indiceFraseAtual];
        elementoFrase.style.opacity = '1';
        indiceFraseAtual = (indiceFraseAtual + 1) % frasesMotivacionais.length;
      }, 500);
    }
  }
  document.addEventListener('DOMContentLoaded', function() {
    const elementoFrase = document.getElementById('fraseAtual');
    if (elementoFrase) {
      elementoFrase.textContent = frasesMotivacionais[0];
      elementoFrase.style.opacity = '1';
    }
    setInterval(trocarFraseMotivacional, 10000);
  });
})();

// === Imagens Flutuantes ===
(function() {
  const imagens = [
    'tenda.jpg', 'tenda1.jpg', 'folha.png',
  ];
  const caminhos = imagens.map(img => `/static/imagens/${img}`);
  const animacoes = [
    'flutuar-horizontal', 'flutuar-vertical', 'flutuar-diagonal1', 'flutuar-diagonal2'
  ];
  const container = document.getElementById('imagens-flutuantes');
  function criarImagemFlutuante() {
    const img = document.createElement('img');
    img.src = caminhos[Math.floor(Math.random() * caminhos.length)];
    img.className = 'imagem-flutuante';
    const size = Math.random() * 120 + 60;
    img.style.width = `${size}px`;
    img.style.height = `${size * (Math.random() * 0.4 + 0.8)}px`;
    img.style.top = `${Math.random() * 80}vh`;
    img.style.left = `${Math.random() * 80}vw`;
    const anim = animacoes[Math.floor(Math.random() * animacoes.length)];
    const dur = Math.random() * 12 + 10;
    img.style.animation = `${anim} ${dur}s linear infinite`;
    img.style.zIndex = 0;
    container.appendChild(img);
    setTimeout(() => { if (img.parentNode) img.parentNode.removeChild(img); }, dur * 1000);
  }
  for (let i = 0; i < 7; i++) criarImagemFlutuante();
  setInterval(criarImagemFlutuante, 3000);
})();

// === AnimaÃ§Ãµes CSS para imagens flutuantes ===
const style = document.createElement('style');
style.innerHTML = `
@keyframes flutuar-horizontal {
  0% { left: -20vw; }
  100% { left: 110vw; }
}
@keyframes flutuar-vertical {
  0% { top: -20vh; }
  100% { top: 110vh; }
}
@keyframes flutuar-diagonal1 {
  0% { left: -15vw; top: 100vh; }
  100% { left: 110vw; top: -15vh; }
}
@keyframes flutuar-diagonal2 {
  0% { left: 100vw; top: 110vh; }
  100% { left: -15vw; top: -15vh; }
}

/* AnimaÃ§Ã£o de borda cintilante com cores do logotipo */
@keyframes borda-cintilante {
  0% { 
    left: -100%; 
    background: linear-gradient(90deg, transparent, rgba(255, 107, 53, 0.4), transparent);
  }
  25% {
    background: linear-gradient(90deg, transparent, rgba(247, 147, 30, 0.4), transparent);
  }
  50% { 
    left: 100%; 
    background: linear-gradient(90deg, transparent, rgba(255, 210, 63, 0.4), transparent);
  }
  75% {
    background: linear-gradient(90deg, transparent, rgba(255, 107, 53, 0.4), transparent);
  }
  100% { 
    left: 100%; 
    background: linear-gradient(90deg, transparent, rgba(247, 147, 30, 0.4), transparent);
  }
}

/* Efeito de brilho nos containers */
#painel-horario, #funcionariosLogadosBox {
  transition: all 0.3s ease;
}

#painel-horario:hover, #funcionariosLogadosBox:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(255, 107, 53, 0.2);
}
`;
document.head.appendChild(style);
